{{- if .Values.ollama.observability.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "ai-compare-suse.fullname" . }}-ollama-otel-config
  labels:
    app.kubernetes.io/name: ollama-otel-collector
    app.kubernetes.io/component: observability
data:
  otel-collector-config.yaml: |
    receivers:
      # HTTP receiver to scrape Ollama metrics and create traces
      httpcheck:
        targets:
          - endpoint: http://localhost:{{ .Values.ollama.service.port }}
            method: GET
        collection_interval: 30s
      
      # Prometheus receiver for standard metrics
      prometheus:
        config:
          scrape_configs:
            - job_name: 'ollama'
              scrape_interval: 30s
              static_configs:
                - targets: ['localhost:{{ .Values.ollama.service.port }}']
              metrics_path: '/metrics'
              
      # OTLP receiver for any traces sent directly
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318

    processors:
      # Add resource attributes to identify Ollama service
      resource:
        attributes:
          - key: service.name
            value: "ollama-server"
            action: upsert
          - key: service.version
            value: "{{ .Values.ollama.image.tag }}"
            action: upsert
          - key: deployment.environment
            value: "{{ .Release.Namespace }}"
            action: upsert
          - key: k8s.cluster.name
            value: "ai-compare-cluster"
            action: upsert
          - key: k8s.namespace.name
            value: "{{ .Release.Namespace }}"
            action: upsert
          - key: k8s.pod.name
            from_attribute: k8s.pod.name
            action: upsert
            
      # Batch processor for efficiency
      batch:
        timeout: 10s
        send_batch_size: 1024

    exporters:
      # Export to SUSE Observability
      otlphttp:
        endpoint: {{ .Values.ollama.observability.otlpEndpoint }}
        headers:
          "Content-Type": "application/x-protobuf"
        compression: gzip
        
      # Debug logging (optional)
      logging:
        loglevel: info
        
    extensions:
      health_check:
        endpoint: 0.0.0.0:13133
      pprof:
        endpoint: 0.0.0.0:1777
      zpages:
        endpoint: 0.0.0.0:55679

    service:
      extensions: [health_check, pprof, zpages]
      pipelines:
        traces:
          receivers: [otlp, httpcheck]
          processors: [resource, batch]
          exporters: [otlphttp, logging]
        metrics:
          receivers: [prometheus, httpcheck]
          processors: [resource, batch]
          exporters: [otlphttp, logging]
{{- end }}