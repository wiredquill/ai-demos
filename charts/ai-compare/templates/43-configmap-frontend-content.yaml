{{- if .Values.frontend.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "ai-compare.fullname" . }}-frontend-content
  labels:
    {{- include "ai-compare.labels" . | nindent 4 }}
    app.kubernetes.io/component: frontend
data:
  index.html: |
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>AI Compare - End User Interface</title>
        <link rel="stylesheet" href="style.css">
    </head>
    <body>
        <div class="container">
            <header class="header">
                <h1>AI Compare</h1>
                <p>Compare AI responses: Direct Ollama vs Enhanced Open WebUI</p>
            </header>

            <main class="main-content">
                <!-- Chat Input Section -->
                <div class="input-section">
                    <div class="input-group">
                        <textarea id="userInput" placeholder="Ask me anything..." rows="3"></textarea>
                        <button id="sendButton" class="send-btn">Ask AI</button>
                    </div>
                </div>

                <!-- Response Comparison Section -->
                <div class="response-section">
                    <div class="response-column">
                        <div class="response-header ollama-header">
                            <h3>ü¶ô Direct Ollama</h3>
                            <span class="response-label">Raw AI Response</span>
                        </div>
                        <div class="response-content ollama-response" id="ollamaResponse">
                            <div class="placeholder">Ask a question to see the direct Ollama response...</div>
                        </div>
                    </div>

                    <div class="response-column">
                        <div class="response-header webui-header">
                            <h3>üîß Enhanced Open WebUI</h3>
                            <span class="response-label">Pipeline-Enhanced Response</span>
                        </div>
                        <div class="response-content webui-response" id="webuiResponse">
                            <div class="placeholder">Ask a question to see the enhanced pipeline response...</div>
                        </div>
                    </div>
                </div>

                <!-- Demo Controls Section -->
                <div class="demo-section">
                    <div class="demo-header">
                        <h3>üîß SUSE Security & Observability Demos</h3>
                    </div>
                    
                    <div class="demo-controls">
                        <!-- Data Leak Demo - Moved up per requirements -->
                        <div class="demo-control">
                            <button id="dataLeakBtn" class="demo-btn data-leak-btn">
                                üîí Data Leak Demo
                            </button>
                            <span class="demo-description">Simulate sensitive data transmission for NeuVector DLP detection</span>
                        </div>

                        <!-- Availability Demo - Now On/Off Toggle -->
                        <div class="demo-control">
                            <button id="availabilityBtn" class="demo-btn availability-btn" data-state="off">
                                üåê Availability Demo: OFF
                            </button>
                            <span class="demo-description">Toggle service failure simulation for SUSE Observability monitoring</span>
                        </div>
                    </div>

                    <!-- Status Messages -->
                    <div id="demoStatus" class="demo-status"></div>
                </div>
            </main>

            <footer class="footer">
                <p>Powered by SUSE AI Stack ‚Ä¢ <a href="https://www.suse.com" target="_blank">Learn More</a></p>
            </footer>
        </div>

        <!-- Loading Overlay -->
        <div id="loadingOverlay" class="loading-overlay">
            <div class="loading-spinner"></div>
            <div class="loading-text">Processing your request...</div>
        </div>

        <script src="script.js"></script>
    </body>
    </html>
  
  style.css: |
    /* AI Compare End User Interface Styles */

    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    :root {
        --suse-green: #30ba78;
        --suse-dark-green: #28a745;
        --suse-light-green: #73ba25;
        --dark-bg: linear-gradient(135deg, #0a2f26 0%, #0c322c 50%, #0f3a2f 100%);
        --card-bg: rgba(255, 255, 255, 0.05);
        --border-color: rgba(48, 186, 120, 0.2);
        --text-primary: #efefef;
        --text-secondary: #b8b8b8;
        --success-color: #4CAF50;
        --warning-color: #ffa726;
        --error-color: #f44336;
    }

    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background: var(--dark-bg);
        color: var(--text-primary);
        min-height: 100vh;
        line-height: 1.6;
    }

    .container {
        max-width: 1400px;
        margin: 0 auto;
        padding: 20px;
        min-height: 100vh;
        display: flex;
        flex-direction: column;
    }

    /* Header */
    .header {
        text-align: center;
        padding: 30px 20px;
        background: linear-gradient(135deg, #0c322c 0%, #1a4a3a 100%);
        border-radius: 15px;
        box-shadow: 0 8px 32px rgba(0,0,0,0.3);
        margin-bottom: 30px;
    }

    .header h1 {
        color: var(--suse-green);
        font-size: 2.5em;
        font-weight: 700;
        margin-bottom: 10px;
    }

    .header p {
        color: var(--text-secondary);
        font-size: 1.2em;
        font-weight: 400;
    }

    /* Main Content */
    .main-content {
        flex: 1;
        display: flex;
        flex-direction: column;
        gap: 30px;
    }

    /* Input Section */
    .input-section {
        background: var(--card-bg);
        border: 2px solid var(--border-color);
        border-radius: 15px;
        padding: 25px;
        backdrop-filter: blur(10px);
    }

    .input-group {
        display: flex;
        gap: 15px;
        align-items: flex-end;
    }

    #userInput {
        flex: 1;
        background: rgba(255, 255, 255, 0.08);
        border: 2px solid var(--border-color);
        border-radius: 12px;
        padding: 15px;
        color: var(--text-primary);
        font-size: 16px;
        font-family: inherit;
        resize: vertical;
        min-height: 60px;
        transition: all 0.3s ease;
    }

    #userInput:focus {
        outline: none;
        border-color: var(--suse-green);
        box-shadow: 0 0 0 3px rgba(48, 186, 120, 0.2);
        background: rgba(255, 255, 255, 0.1);
    }

    #userInput::placeholder {
        color: var(--text-secondary);
        font-style: italic;
    }

    .send-btn {
        background: linear-gradient(135deg, var(--suse-green) 0%, var(--suse-dark-green) 100%);
        color: white;
        border: none;
        border-radius: 12px;
        padding: 15px 25px;
        font-size: 16px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        min-width: 120px;
        box-shadow: 0 4px 15px rgba(48, 186, 120, 0.3);
    }

    .send-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(48, 186, 120, 0.4);
        background: linear-gradient(135deg, var(--suse-dark-green) 0%, #1e7e34 100%);
    }

    .send-btn:active {
        transform: translateY(0);
        box-shadow: 0 2px 10px rgba(48, 186, 120, 0.3);
    }

    .send-btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        transform: none;
    }

    /* Response Section */
    .response-section {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 25px;
    }

    .response-column {
        background: var(--card-bg);
        border: 2px solid var(--border-color);
        border-radius: 15px;
        overflow: hidden;
        backdrop-filter: blur(10px);
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
    }

    .response-header {
        padding: 20px;
        border-bottom: 2px solid var(--border-color);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .ollama-header {
        background: linear-gradient(135deg, #4CAF50 0%, #66BB6A 100%);
    }

    .webui-header {
        background: linear-gradient(135deg, #2196F3 0%, #42A5F5 100%);
    }

    .response-header h3 {
        color: white;
        font-size: 1.3em;
        font-weight: 600;
    }

    .response-label {
        color: rgba(255, 255, 255, 0.9);
        font-size: 0.9em;
        font-weight: 500;
    }

    .response-content {
        padding: 20px;
        min-height: 300px;
        max-height: 500px;
        overflow-y: auto;
    }

    .response-content .placeholder {
        color: var(--text-secondary);
        font-style: italic;
        text-align: center;
        padding: 40px 20px;
    }

    .response-text {
        white-space: pre-wrap;
        line-height: 1.7;
    }

    /* Demo Section */
    .demo-section {
        background: var(--card-bg);
        border: 2px solid var(--border-color);
        border-radius: 15px;
        padding: 25px;
        backdrop-filter: blur(10px);
    }

    .demo-header h3 {
        color: var(--suse-green);
        font-size: 1.4em;
        margin-bottom: 20px;
    }

    .demo-controls {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
        gap: 20px;
        margin-bottom: 20px;
    }

    .demo-control {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    .demo-btn {
        background: linear-gradient(135deg, #6c757d 0%, #5a6268 100%);
        color: white;
        border: none;
        border-radius: 12px;
        padding: 15px 20px;
        font-size: 16px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        position: relative;
        overflow: hidden;
    }

    .demo-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);
    }

    .demo-btn:active {
        transform: scale(0.98);
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
    }

    .demo-btn.active {
        background: linear-gradient(135deg, var(--warning-color) 0%, #ff9800 100%);
        animation: pulse 2s infinite;
    }

    .data-leak-btn {
        background: linear-gradient(135deg, #dc3545 0%, #e04f5e 100%);
    }

    .data-leak-btn:hover {
        background: linear-gradient(135deg, #e04f5e 0%, #e8606f 100%);
    }

    .availability-btn[data-state="on"] {
        background: linear-gradient(135deg, var(--error-color) 0%, #e57373 100%);
        animation: pulse 2s infinite;
        box-shadow: 0 4px 15px rgba(244, 67, 54, 0.4);
    }

    .availability-btn[data-state="on"]:hover {
        background: linear-gradient(135deg, #e57373 0%, #ef5350 100%);
        box-shadow: 0 6px 20px rgba(244, 67, 54, 0.5);
    }

    .availability-btn[data-state="off"] {
        background: linear-gradient(135deg, var(--success-color) 0%, #66BB6A 100%);
        box-shadow: 0 4px 15px rgba(76, 175, 80, 0.3);
    }

    .availability-btn[data-state="off"]:hover {
        background: linear-gradient(135deg, #66BB6A 0%, #81C784 100%);
        box-shadow: 0 6px 20px rgba(76, 175, 80, 0.4);
    }

    .demo-description {
        color: var(--text-secondary);
        font-size: 0.9em;
        font-style: italic;
    }

    /* Demo Status */
    .demo-status {
        padding: 15px;
        border-radius: 10px;
        margin-top: 10px;
        font-weight: 500;
        opacity: 0;
        transform: translateY(-10px);
        transition: all 0.3s ease;
    }

    .demo-status.show {
        opacity: 1;
        transform: translateY(0);
    }

    .demo-status.success {
        background: rgba(76, 175, 80, 0.15);
        border: 1px solid var(--success-color);
        color: var(--success-color);
    }

    .demo-status.warning {
        background: rgba(255, 167, 38, 0.15);
        border: 1px solid var(--warning-color);
        color: var(--warning-color);
    }

    .demo-status.error {
        background: rgba(244, 67, 54, 0.15);
        border: 1px solid var(--error-color);
        color: var(--error-color);
    }

    /* Loading Overlay */
    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.8);
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        z-index: 1000;
        opacity: 0;
        pointer-events: none;
        transition: opacity 0.3s ease;
    }

    .loading-overlay.show {
        opacity: 1;
        pointer-events: auto;
    }

    .loading-spinner {
        width: 50px;
        height: 50px;
        border: 4px solid rgba(48, 186, 120, 0.3);
        border-top: 4px solid var(--suse-green);
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin-bottom: 20px;
    }

    .loading-text {
        color: var(--text-primary);
        font-size: 1.1em;
        font-weight: 500;
    }

    /* Footer */
    .footer {
        text-align: center;
        padding: 20px;
        color: var(--text-secondary);
        font-size: 0.9em;
        margin-top: 30px;
    }

    .footer a {
        color: var(--suse-green);
        text-decoration: none;
        transition: color 0.3s ease;
    }

    .footer a:hover {
        color: var(--suse-light-green);
    }

    /* Animations */
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    @keyframes pulse {
        0%, 100% { opacity: 1; }
        50% { opacity: 0.7; }
    }

    /* Responsive Design */
    @media (max-width: 768px) {
        .container {
            padding: 15px;
        }
        
        .header h1 {
            font-size: 2em;
        }
        
        .header p {
            font-size: 1em;
        }
        
        .response-section {
            grid-template-columns: 1fr;
            gap: 15px;
        }
        
        .input-group {
            flex-direction: column;
            gap: 10px;
        }
        
        .demo-controls {
            grid-template-columns: 1fr;
            gap: 15px;
        }
    }

    @media (max-width: 480px) {
        .main-content {
            gap: 20px;
        }
        
        .input-section,
        .demo-section {
            padding: 20px;
        }
        
        .response-content {
            min-height: 200px;
            max-height: 300px;
        }
    }
  
  script.js: |
    // AI Compare End User Interface JavaScript

    class AICompareClient {
        constructor() {
            this.apiBaseUrl = '/api';  // Proxied through NGINX to backend
            this.isLoading = false;
            this.availabilityDemoState = false;
            
            this.initializeElements();
            this.attachEventListeners();
            this.initializeState();
            this.generateTraffic();
        }
        
        initializeElements() {
            this.userInput = document.getElementById('userInput');
            this.sendButton = document.getElementById('sendButton');
            this.ollamaResponse = document.getElementById('ollamaResponse');
            this.webuiResponse = document.getElementById('webuiResponse');
            this.dataLeakBtn = document.getElementById('dataLeakBtn');
            this.availabilityBtn = document.getElementById('availabilityBtn');
            this.demoStatus = document.getElementById('demoStatus');
            this.loadingOverlay = document.getElementById('loadingOverlay');
        }
        
        attachEventListeners() {
            // Send button click
            this.sendButton.addEventListener('click', () => this.sendMessage());
            
            // Enter key in textarea
            this.userInput.addEventListener('keydown', (e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    this.sendMessage();
                }
            });
            
            // Demo buttons
            this.dataLeakBtn.addEventListener('click', () => this.runDataLeakDemo());
            this.availabilityBtn.addEventListener('click', () => this.toggleAvailabilityDemo());
        }
        
        async initializeState() {
            try {
                // Check initial availability demo state
                const response = await this.makeRequest('GET', '/health');
                
                // Check if service is currently in failure state
                if (response.status === 'FAILING') {
                    this.availabilityDemoState = true;
                } else {
                    this.availabilityDemoState = false;
                }
                
                this.updateAvailabilityButton();
                console.log('üîÑ Initial demo state loaded:', this.availabilityDemoState ? 'ON' : 'OFF');
                
            } catch (error) {
                console.log('‚ö†Ô∏è Could not load initial demo state:', error.message);
                // Default to OFF state if we can't determine current state
                this.availabilityDemoState = false;
                this.updateAvailabilityButton();
            }
        }
        
        async sendMessage() {
            const message = this.userInput.value.trim();
            if (!message || this.isLoading) return;
            
            this.setLoading(true);
            this.updateResponsePlaceholders('Thinking...', 'Processing...');
            
            try {
                const response = await this.makeRequest('POST', '/chat', {
                    message: message,
                    model: 'tinyllama:latest'
                });
                
                if (response.status === 'success') {
                    this.updateResponses(response.ollama_response, response.webui_response);
                } else {
                    throw new Error(response.error || 'Unknown error');
                }
                
            } catch (error) {
                console.error('Chat request failed:', error);
                this.updateResponses(
                    `‚ùå Error: ${error.message}`,
                    `‚ùå Error: ${error.message}`
                );
                this.showDemoStatus(`Request failed: ${error.message}`, 'error');
            } finally {
                this.setLoading(false);
            }
        }
        
        async runDataLeakDemo() {
            if (this.isLoading) return;
            
            this.setButtonLoading(this.dataLeakBtn, true);
            
            try {
                const response = await this.makeRequest('POST', '/data-leak-demo');
                this.showDemoStatus(response.message, response.status);
                
            } catch (error) {
                console.error('Data leak demo failed:', error);
                this.showDemoStatus(`Demo failed: ${error.message}`, 'error');
            } finally {
                this.setButtonLoading(this.dataLeakBtn, false);
            }
        }
        
        async toggleAvailabilityDemo() {
            if (this.isLoading) return;
            
            this.setButtonLoading(this.availabilityBtn, true);
            
            try {
                const response = await this.makeRequest('POST', '/availability-demo/toggle');
                
                // Update button state
                this.availabilityDemoState = response.service_failure_active;
                this.updateAvailabilityButton();
                
                this.showDemoStatus(response.message, response.status);
                
            } catch (error) {
                console.error('Availability demo failed:', error);
                this.showDemoStatus(`Demo failed: ${error.message}`, 'error');
            } finally {
                this.setButtonLoading(this.availabilityBtn, false);
            }
        }
        
        updateAvailabilityButton() {
            if (this.availabilityDemoState) {
                this.availabilityBtn.textContent = 'üî¥ Availability Demo: ON (FAILING)';
                this.availabilityBtn.setAttribute('data-state', 'on');
                this.availabilityBtn.classList.add('active');
                this.availabilityBtn.title = 'Service is currently failing - click to restore health';
            } else {
                this.availabilityBtn.textContent = 'üü¢ Availability Demo: OFF (HEALTHY)';
                this.availabilityBtn.setAttribute('data-state', 'off');
                this.availabilityBtn.classList.remove('active');
                this.availabilityBtn.title = 'Service is healthy - click to simulate failure';
            }
        }
        
        updateResponses(ollamaText, webuiText) {
            this.ollamaResponse.innerHTML = `<div class="response-text">${this.escapeHtml(ollamaText)}</div>`;
            this.webuiResponse.innerHTML = `<div class="response-text">${this.escapeHtml(webuiText)}</div>`;
        }
        
        updateResponsePlaceholders(ollamaText, webuiText) {
            this.ollamaResponse.innerHTML = `<div class="placeholder">${ollamaText}</div>`;
            this.webuiResponse.innerHTML = `<div class="placeholder">${webuiText}</div>`;
        }
        
        showDemoStatus(message, type) {
            this.demoStatus.textContent = message;
            this.demoStatus.className = `demo-status show ${type}`;
            
            // Auto-hide after 5 seconds
            setTimeout(() => {
                this.demoStatus.classList.remove('show');
            }, 5000);
        }
        
        setLoading(loading) {
            this.isLoading = loading;
            this.sendButton.disabled = loading;
            this.userInput.disabled = loading;
            
            if (loading) {
                this.loadingOverlay.classList.add('show');
                this.sendButton.textContent = 'Sending...';
            } else {
                this.loadingOverlay.classList.remove('show');
                this.sendButton.textContent = 'Ask AI';
            }
        }
        
        setButtonLoading(button, loading) {
            if (loading) {
                button.disabled = true;
                button.style.opacity = '0.6';
            } else {
                button.disabled = false;
                button.style.opacity = '1';
            }
        }
        
        async makeRequest(method, endpoint, data = null) {
            const url = `${this.apiBaseUrl}${endpoint}`;
            const options = {
                method: method,
                headers: {
                    'Content-Type': 'application/json',
                }
            };
            
            if (data) {
                options.body = JSON.stringify(data);
            }
            
            console.log(`üåê Making ${method} request to ${url}`);
            
            const response = await fetch(url, options);
            
            if (!response.ok) {
                const errorData = await response.json().catch(() => ({}));
                throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);
            }
            
            return await response.json();
        }
        
        // Generate continuous HTTP traffic for observability
        generateTraffic() {
            // Health check every 30 seconds
            setInterval(async () => {
                try {
                    await fetch('/health');
                    console.log('üü¢ Health check - OK');
                } catch (error) {
                    console.log('üî¥ Health check - Failed:', error.message);
                }
            }, 30000);
            
            // Metrics check every 60 seconds  
            setInterval(async () => {
                try {
                    const response = await fetch('/api/metrics');
                    const metrics = await response.json();
                    console.log('üìä Metrics:', metrics);
                } catch (error) {
                    console.log('üìä Metrics check failed:', error.message);
                }
            }, 60000);
        }
        
        escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }
    }

    // Initialize the application when DOM is loaded
    document.addEventListener('DOMContentLoaded', () => {
        console.log('üöÄ AI Compare End User Interface loaded');
        window.aiCompare = new AICompareClient();
    });

    // Add visual feedback for all buttons
    document.addEventListener('click', (e) => {
        if (e.target.tagName === 'BUTTON') {
            // Visual click feedback
            e.target.style.transform = 'scale(0.95)';
            setTimeout(() => {
                e.target.style.transform = '';
            }, 150);
        }
    });
{{- end }}