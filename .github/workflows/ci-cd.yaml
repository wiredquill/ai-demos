# .github/workflows/ci-cd.yaml
name: Build, Push, and Update AI Compare Charts (upstream & SUSE)

on:
  push:
    branches: [ main ]
    paths:
      - 'app/**'
      - 'frontend/**'
      - 'charts/**'
      - '.github/workflows/ci-cd.yaml'
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  # TODO: Re-enable tests after fixing Python 3.11 compatibility issues
  # test:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  #       
  #     - name: Set up Python 3.11
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: 3.11
  #         
  #     - name: Install dependencies
  #       run: |
  #         cd app
  #         python -m pip install --upgrade pip
  #         pip install -r requirements.txt
  #         pip install -r test-requirements.txt
  #         
  #     - name: Run tests
  #       run: |
  #         cd app
  #         python -m pytest tests/ -v --tb=short

  build-and-push-images:
    runs-on: ubuntu-latest
    # needs: test
    outputs:
      IMAGE_TAG: ${{ steps.image_meta.outputs.IMAGE_TAG }}
    steps:
      - name: Notify build start
        run: |
          curl -d "GitHub Actions started - Building AI Compare images..." ntfy.sh/wq_task

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate image tag and lowercase owner
        id: image_meta
        run: |
          TAG=$(echo $GITHUB_SHA | cut -c1-7)
          echo "Generated tag: $TAG"
          echo "GITHUB_SHA: $GITHUB_SHA"
          
          # Fallback to 'latest' if TAG is empty
          if [ -z "$TAG" ]; then
            TAG="latest"
            echo "Warning: GITHUB_SHA was empty, using 'latest' as fallback"
          fi
          
          echo "IMAGE_TAG=$TAG" >> $GITHUB_ENV
          echo "IMAGE_TAG=$TAG" >> $GITHUB_OUTPUT
          echo "Final tag: $TAG"

          OWNER_LC=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo "OWNER_LC=$OWNER_LC" >> $GITHUB_ENV
          echo "Lowercase Owner: $OWNER_LC"
          
          echo "BASE_IMAGE_NAME=${{ github.event.repository.name }}" >> $GITHUB_ENV
          echo "SUSE_IMAGE_NAME=${{ github.event.repository.name }}-suse" >> $GITHUB_ENV

      - name: Build and push upstream Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: app/Dockerfile.upstream
          push: true
          tags: |
            ghcr.io/${{ env.OWNER_LC }}/${{ env.BASE_IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ghcr.io/${{ env.OWNER_LC }}/${{ env.BASE_IMAGE_NAME }}:latest
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push SUSE Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: app/Dockerfile.suse
          push: true
          tags: |
            ghcr.io/${{ env.OWNER_LC }}/${{ env.SUSE_IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ghcr.io/${{ env.OWNER_LC }}/${{ env.SUSE_IMAGE_NAME }}:latest
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Load Simulator Docker image
        uses: docker/build-push-action@v5
        with:
          context: frontend
          file: frontend/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ env.OWNER_LC }}/${{ env.BASE_IMAGE_NAME }}-load-simulator:${{ env.IMAGE_TAG }}
            ghcr.io/${{ env.OWNER_LC }}/${{ env.BASE_IMAGE_NAME }}-load-simulator:latest
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max


  update-and-commit-charts:
    needs: build-and-push-images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq
          yq --version

      - name: Update Helm Chart values.yaml
        run: |
          UPSTREAM_VALUES_PATH="charts/ai-compare/values.yaml"
          SUSE_VALUES_PATH="charts/ai-compare-suse/values.yaml"
          NEW_IMAGE_TAG="${{ needs.build-and-push-images.outputs.IMAGE_TAG }}"

          echo "Updating $UPSTREAM_VALUES_PATH with image tag: $NEW_IMAGE_TAG"
          yq eval ".llmChat.image.tag = \"$NEW_IMAGE_TAG\"" -i "$UPSTREAM_VALUES_PATH"
          cat "$UPSTREAM_VALUES_PATH"

          echo "Updating $SUSE_VALUES_PATH with image tag: $NEW_IMAGE_TAG"
          yq eval ".llmChat.image.tag = \"$NEW_IMAGE_TAG\"" -i "$SUSE_VALUES_PATH"
          cat "$SUSE_VALUES_PATH"

      - name: Increment Chart.yaml versions
        run: |
          UPSTREAM_CHART_PATH="charts/ai-compare/Chart.yaml"
          SUSE_CHART_PATH="charts/ai-compare-suse/Chart.yaml"

          increment_version() {
            local chart_path=$1
            local current_version=$(yq eval '.version' "$chart_path")
            IFS='.' read -r major minor patch <<< "$current_version"
            new_patch=$((patch + 1))
            new_version="$major.$minor.$new_patch"
            yq eval ".version = \"$new_version\"" -i "$chart_path"
            echo "Updated $chart_path to version: $new_version"
            cat "$chart_path"
          }

          increment_version "$UPSTREAM_CHART_PATH"
          increment_version "$SUSE_CHART_PATH"

      - name: Commit and push updated Helm chart files
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          git add "charts/ai-compare/values.yaml" "charts/ai-compare-suse/values.yaml" "charts/ai-compare/Chart.yaml" "charts/ai-compare-suse/Chart.yaml"
          
          if git diff --staged --quiet; then
            echo "No changes to commit in Helm chart files."
          else
            git commit -m "CI: Update Helm chart image tags to ${{ needs.build-and-push-images.outputs.IMAGE_TAG }} and increment chart versions"
            
            # Pull and rebase to handle any conflicts
            echo "Pulling latest changes before push..."
            git pull --rebase origin main
            
            # Push with retry logic
            for i in {1..3}; do
              if git push; then
                echo "Successfully pushed updated Helm chart files to repository."
                break
              else
                echo "Push failed, attempt $i/3. Pulling again..."
                git pull --rebase origin main
                if [ $i -eq 3 ]; then
                  echo "Failed to push after 3 attempts"
                  exit 1
                fi
              fi
            done
          fi

      - name: Notify build completion
        run: |
          curl -d "GitHub Actions build complete - AI Compare updated with tag ${{ needs.build-and-push-images.outputs.IMAGE_TAG }}" ntfy.sh/wq_task

